---

name: calculate-times
run-name: calculate-times-${{ inputs.mode }}-${{ inputs.year }}-${{ inputs.geography }}-${{ inputs.state }}-${{ inputs.centroid_type }}

on:
  workflow_dispatch:
    inputs:
      # Input values match those in params.yaml
      mode:
        required: true
        description: Travel mode
        default: 'car'
        type: choice
        options:
          - car
          - bicycle
          - transit
          - walk

      year:
        required: true
        description: Census data year
        default: '2020'
        type: choice
        options:
          - '2020'
          - '2021'
          - '2022'
          - '2023'
          - '2024'

      geography:
        required: true
        description: Census data geography
        default: county
        type: choice
        options:
          - state
          - county
          - county_subdivision
          - tract
          - block_group
          - zcta

      state:
        required: true
        description: State to generate times for
        default: '01'
        type: choice
        options:
          - '01'
          - '02'
          - '04'
          - '05'
          - '06'
          - '08'
          - '09'
          - '10'
          - '11'
          - '12'
          - '13'
          - '15'
          - '16'
          - '17'
          - '18'
          - '19'
          - '20'
          - '21'
          - '22'
          - '23'
          - '24'
          - '25'
          - '26'
          - '27'
          - '28'
          - '29'
          - '30'
          - '31'
          - '32'
          - '33'
          - '34'
          - '35'
          - '36'
          - '37'
          - '38'
          - '39'
          - '40'
          - '41'
          - '42'
          - '44'
          - '45'
          - '46'
          - '47'
          - '48'
          - '49'
          - '50'
          - '51'
          - '53'
          - '54'
          - '55'
          - '56'

      centroid_type:
        required: true
        description: Weighted or unweighted
        default: weighted
        type: choice
        options:
          - weighted
          - unweighted

env:
  AWS_DEFAULT_REGION: us-east-1
  # See: https://github.com/aws/aws-cli/issues/5262#issuecomment-705832151
  AWS_EC2_METADATA_DISABLED: true

jobs:
  setup-jobs:
    runs-on: ubuntu-latest

    outputs:
      chunks: ${{ steps.create-job-chunks.outputs.chunks }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install DVC
        uses: ./.github/actions/setup-dvc

      - name: Build Dockerized dependencies
        uses: ./.github/actions/build-docker
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Cloudflare credentials
        uses: ./.github/actions/setup-cloudflare-s3
        with:
          CLOUDFLARE_S3_API_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_S3_API_ACCESS_KEY_ID }}
          CLOUDFLARE_S3_API_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_S3_API_SECRET_ACCESS_KEY }}

      - name: Cache restore network input data
        id: cache-restore-network-input
        uses: actions/cache/restore@v4
        with:
          path: ./data/intermediate/network
          key: network-${{ inputs.year }}-${{ inputs.state }}-${{ hashFiles('./data/dvc.lock') }}

      - name: Cache restore location input data
        id: cache-restore-location-input
        uses: actions/cache/restore@v4
        with:
          path: |
            ./data/intermediate/cenloc
            ./data/intermediate/destpoint
          key: location-${{ inputs.year }}-${{ inputs.geography }}-${{ inputs.state }}-${{ hashFiles('./data/dvc.lock') }}

      - name: Cache restore custom JAR
        id: cache-restore-custom-jar
        uses: actions/cache/restore@v4
        with:
          path: ./data/jars
          key: jar-${{ hashFiles('./data/jars/r5-custom.jar.md5') }}

      - name: Pull DVC objects
        if: ${{ steps.cache-restore-network-input.outputs.cache-hit != 'true' ||
                steps.cache-restore-location-input.outputs.cache-hit != 'true' }}
        shell: bash
        working-directory: 'data'
        run: |
          od_path=year=${{ inputs.year }}/geography=${{ inputs.geography }}/state=${{ inputs.state }}/${{ inputs.state }}.parquet
          net_path=year=${{ inputs.year }}/geography=state/state=${{ inputs.state }}
          dvc pull --no-run-cache \
            ./intermediate/cenloc/"$od_path" \
            ./intermediate/destpoint/"$od_path" \
            ./intermediate/network/"$net_path"/network.dat \
            ./intermediate/network/"$net_path"/network_settings.json

      - name: Fetch custom R5 jar
        if: ${{ steps.cache-restore-custom-jar.outputs.cache-hit != 'true' }}
        shell: bash
        working-directory: 'data'
        run: |
          aws s3 cp --quiet --endpoint-url \
            https://fcb279b22cfe4c98f903ad8f9e7ccbb2.r2.cloudflarestorage.com \
            s3://opentimes-resources/jars/r5-custom.jar ./jars/r5-custom.jar \
            --profile cloudflare

      - name: Cache save network input data
        if: ${{ steps.cache-restore-network-input.outputs.cache-hit != 'true' }}
        id: cache-save-network-input
        uses: actions/cache/save@v4
        with:
          path: ./data/intermediate/network
          key: network-${{ inputs.year }}-${{ inputs.state }}-${{ hashFiles('./data/dvc.lock') }}

      - name: Cache save location input data
        if: ${{ steps.cache-restore-location-input.outputs.cache-hit != 'true' }}
        id: cache-save-location-input
        uses: actions/cache/save@v4
        with:
          path: |
            ./data/intermediate/cenloc
            ./data/intermediate/destpoint
          key: location-${{ inputs.year }}-${{ inputs.geography }}-${{ inputs.state }}-${{ hashFiles('./data/dvc.lock') }}

      - name: Cache save custom JAR
        if: ${{ steps.cache-restore-custom-jar.outputs.cache-hit != 'true' }}
        id: cache-save-custom-jar
        uses: actions/cache/save@v4
        with:
          path: ./data/jars
          key: jar-${{ hashFiles('./data/jars/r5-custom.jar.md5') }}

      - name: Create job chunks
        id: create-job-chunks
        shell: bash
        run: |
          docker compose run --quiet-pull opentimes python3 ./src/split_origin.py \
            --year ${{ inputs.year }} --geography ${{ inputs.geography }} \
            --state ${{ inputs.state }} >> $GITHUB_OUTPUT

  run-job:
    runs-on: ubuntu-latest
    needs: setup-jobs
    strategy:
      # Don't fail all chunks if one fails
      fail-fast: false
      matrix:
        chunk: ${{ fromJSON(needs.setup-jobs.outputs.chunks) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Cloudflare credentials
        uses: ./.github/actions/setup-cloudflare-s3
        with:
          CLOUDFLARE_S3_API_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_S3_API_ACCESS_KEY_ID }}
          CLOUDFLARE_S3_API_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_S3_API_SECRET_ACCESS_KEY }}

      - name: Cache restore network input data
        id: cache-restore-network-input-job
        uses: actions/cache/restore@v4
        with:
          path: ./data/intermediate/network
          key: network-${{ inputs.year }}-${{ inputs.state }}-${{ hashFiles('./data/dvc.lock') }}

      - name: Cache restore location input data
        id: cache-restore-location-input-job
        uses: actions/cache/restore@v4
        with:
          path: |
            ./data/intermediate/cenloc
            ./data/intermediate/destpoint
          key: location-${{ inputs.year }}-${{ inputs.geography }}-${{ inputs.state }}-${{ hashFiles('./data/dvc.lock') }}

      - name: Cache restore custom JAR
        id: cache-restore-custom-jar
        uses: actions/cache/restore@v4
        with:
          path: ./data/jars
          key: jar-${{ hashFiles('./data/jars/r5-custom.jar.md5') }}

      - name: Run job chunk
        shell: bash
        working-directory: 'data'
        run: |
          docker compose run --quiet-pull opentimes Rscript ./src/calculate_times.R \
            --mode ${{ inputs.mode }} --year ${{ inputs.year }} \
            --geography ${{ inputs.geography }} --state ${{ inputs.state }} \
            --centroid_type ${{ inputs.centroid_type }} \
            --chunk ${{ matrix.chunk }}
