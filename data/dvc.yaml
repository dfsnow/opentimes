---

stages:
  fetch_tiger_national:
    matrix:
      year: ${input.year}
      geography: ${input.census.geography.national}
    cmd: "python ./src/fetch_tiger.py
      --year ${item.year} --geography ${item.geography}"
    outs:
      - ./input/tiger/year=${item.year}/geography=${item.geography}/${item.geography}.zip:
          persist: true

  fetch_tiger_by_state:
    matrix:
      year: ${input.year}
      geography: ${input.census.geography.by_state}
      state: ${input.state}
    cmd: "python ./src/fetch_tiger.py
      --year ${item.year} --geography ${item.geography}
      --state ${item.state}"
    outs:
      - ./input/tiger/year=${item.year}/geography=${item.geography}/state=${item.state}/${item.state}.zip:
          persist: true

  fetch_blockpop_by_state:
    matrix:
      year: ['2020']
      state: ${input.state}
    cmd: "python ./src/fetch_blockpop.py
      --year ${item.year} --state ${item.state}"
    outs:
      - ./input/blockpop/year=${item.year}/state=${item.state}/${item.state}.parquet:
          persist: true

  fetch_osm_national:
    matrix:
      year: ${input.year}
    cmd:
      'LAST_TWO=$( echo ${item.year} | cut -c 3-4) &&
      mkdir -p ./input/osm/year=${item.year} &&
      wget -P ./input/osm/year=${item.year}
      -O ./input/osm/year=${item.year}/us-${item.year}.osm.pbf
      https://download.geofabrik.de/north-america-"$LAST_TWO"0101.osm.pbf'
    outs:
      - ./input/osm/year=${item.year}/us-${item.year}.osm.pbf:
          persist: true

  create_blockloc_by_state:
    deps:
      - ./input/blockpop/year=2020/state=${item.state}/${item.state}.parquet
      - ./input/tiger/year=${item.year}/geography=block/state=${item.state}/${item.state}.zip
    matrix:
      year: ${input.year}
      state: ${input.state}
    cmd: "python ./src/create_blockloc.py
      --year ${item.year} --state ${item.state}"
    outs:
      - ./intermediate/blockloc/year=${item.year}/state=${item.state}/${item.state}.parquet:
          persist: true

  create_cenloc_national:
    deps:
      - ./input/tiger/year=${item.year}/geography=${item.geography}/${item.geography}.zip
      - ./intermediate/blockloc/year=${item.year}/
    matrix:
      year: ${input.year}
      geography: ${input.census.geography.national}
    cmd: "python ./src/create_cenloc.py
      --year ${item.year} --geography ${item.geography}"
    outs:
      - ./intermediate/cenloc/year=${item.year}/geography=${item.geography}/:
          persist: true

  create_cenloc_by_state:
    deps:
      - ./input/tiger/year=${item.year}/geography=${item.geography}/state=${item.state}/${item.state}.zip
      - ./intermediate/blockloc/year=${item.year}/
    matrix:
      year: ${input.year}
      geography:
        - county_subdivision
        - tract
        - block_group
      state: ${input.state}
    cmd: "python ./src/create_cenloc.py
      --year ${item.year} --geography ${item.geography}
      --state ${item.state}"
    outs:
      - ./intermediate/cenloc/year=${item.year}/geography=${item.geography}/state=${item.state}/${item.state}.parquet:
          persist: true

  create_osmclip_by_state:
    deps:
      - ./input/tiger/year=${item.year}/geography=state/state.zip
    matrix:
      year: ${input.year}
      state: ${input.state}
    cmd: "python ./src/create_osmclip.py
      --year ${item.year} --state ${item.state}
      --buffer ${input.network_buffer_m}"
    outs:
      - ./intermediate/osmclip/year=${item.year}/geography=state/state=${item.state}/${item.state}.geojson:
          persist: true

  create_destpoint_by_state:
    deps:
      - ./intermediate/cenloc/year=${item.year}/geography=${item.geography}/state=${item.state}/${item.state}.parquet
      - ./intermediate/osmclip/year=${item.year}/geography=state/state=${item.state}/${item.state}.geojson
    matrix:
      year: ${input.year}
      geography: ${input.census.geography.all}
      state: ${input.state}
    cmd: "python ./src/create_destpoint.py
      --year ${item.year} --geography ${item.geography}
      --state ${item.state} --buffer ${input.destination_buffer_m}"
    outs:
      - ./intermediate/destpoint/year=${item.year}/geography=${item.geography}/state=${item.state}/${item.state}.parquet:
          persist: true

  create_osmextract_by_state:
    deps:
      - ./input/osm/year=${item.year}/us-${item.year}.osm.pbf
      - ./intermediate/osmclip/year=${item.year}/geography=state/state=${item.state}/${item.state}.geojson
    matrix:
      year: ${input.year}
      state: ${input.state}
    # See: https://docs.conveyal.com/prepare-inputs#preparing-the-osm-data
    cmd: '
      OUT_DIR=./intermediate/osmextract/year=${item.year}/geography=state/state=${item.state} &&
      mkdir -p $OUT_DIR &&
      osmium extract
        --strategy complete_ways
        -p intermediate/osmclip/year=${item.year}/geography=state/state=${item.state}/${item.state}.geojson
        ./input/osm/year=${item.year}/us-${item.year}.osm.pbf --overwrite
        -o "$OUT_DIR"/tmp.osm.pbf &&
      osmium tags-filter "$OUT_DIR"/tmp.osm.pbf
        w/highway w/public_transport=platform
        w/railway=platform w/park_ride r/type=restriction --overwrite
        -o "$OUT_DIR"/${item.state}.osm.pbf &&
      rm $OUT_DIR/tmp.osm.pbf
      '
    outs:
      - ./intermediate/osmextract/year=${item.year}/geography=state/state=${item.state}/${item.state}.osm.pbf:
          persist: true

  create_valhalla_tiles:
    deps:
      - ./valhalla.json
      - ./input/osm/year=${item.year}/us-${item.year}.osm.pbf
      - ./intermediate/osmclip/year=${item.year}/geography=state/state=${item.state}/${item.state}.geojson
    matrix:
      year: ${input.year}
      state: ${input.state}
    # Here we're using compose to run containerized osmium and valhalla to prep tiles.
    # This horrible bash will output a nice tarball of routing tiles, elevation, etc
    # to the target DVC dir
    cmd: '
      BUILD_DIR=build &&
      find "$BUILD_DIR" -type f ! -name "tiles.tar" -delete &&
      OSM_FILE=input/osm/year=${item.year}/us-${item.year}.osm.pbf &&
      JSON_FILE=intermediate/osmclip/year=${item.year}/geography=state/state=${item.state}/${item.state}.geojson &&
      cp "$OSM_FILE" "$BUILD_DIR" &&
      cp "$JSON_FILE" "$BUILD_DIR" &&
      OUT_DIR=intermediate/valhalla_tiles/year=${item.year}/geography=state/state=${item.state} &&
      mkdir -p $OUT_DIR &&
      docker compose run --rm --entrypoint=osmium valhalla-run extract
        --strategy complete_ways
        -p ${item.state}.geojson us-${item.year}.osm.pbf --overwrite
        -o tmp.osm.pbf &&
      docker compose run --rm --entrypoint=osmium valhalla-run
        tags-filter tmp.osm.pbf
        w/highway w/public_transport=platform
        w/railway=platform w/park_ride r/type=restriction --overwrite
        -o tmp_clipped.osm.pbf &&
      rm -f "$BUILD_DIR"/us-${item.year}.osm.pbf "$BUILD_DIR"/${item.state} "$BUILD_DIR"/tmp.osm.pbf &&
      docker compose run --rm valhalla-build &&
      rm -f "$BUILD_DIR"/tmp_clipped.osm.pbf &&
      tar -cf "$BUILD_DIR"/tiles.tar "$BUILD_DIR"/* &&
      zstd --rm -o "$BUILD_DIR"/tiles.tar.zst "$BUILD_DIR"/tiles.tar &&
      mv "$BUILD_DIR"/tiles.tar.zst "$OUT_DIR" &&
      rm -rf ./"$BUILD_DIR"/*
      '
    outs:
      - ./intermediate/valhalla_tiles/year=${item.year}/geography=state/state=${item.state}/tiles.tar.zst:
          persist: true
